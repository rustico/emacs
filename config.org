* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "rustico"
      user-mail-address "nmbases@gmail.com")
#+end_src

* Custom Keybindings
** Copy Line
#+begin_src emacs-lisp
(defun copy-line (arg)
      "Copy lines (as many as prefix argument) in the kill ring"
      (interactive "p")
      (kill-ring-save (line-beginning-position)
                      (line-beginning-position (+ 1 arg)))
      (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

(global-set-key "\C-c\C-k" 'copy-line)
#+end_src
** Search
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

** Move Lines
#+begin_src emacs-lisp
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg)
          ;; Account for changes to transpose-lines in Emacs 24.3
          (when (and (eval-when-compile
                       (not (version-list-<
                             (version-to-list emacs-version)
                             '(24 3 50 0))))
                     (< arg 0))
            (forward-line -1)))
        (forward-line -1))
      (move-to-column column t)))))

(define-key global-map (kbd "M-p")
  (defun move-text-up (arg)
    "Move region (transient-mark-mode active) or current line arg
lines up."
    (interactive "*p")
    (move-text-internal (- arg))))

(define-key global-map (kbd "M-n")
  (defun move-text-down (arg)
    "Move region (transient-mark-mode active) or current line arg
lines down."
    (interactive "*p")
    (move-text-internal arg)))  
#+end_src
  
** Move point to first non-whitespace character or beginning-of-line
#+begin_src emacs-lisp
(define-key global-map [remap move-beginning-of-line]
  (defun smart-beginning-of-line ()
    "Move point to first non-whitespace character or beginning-of-line.

  Move point to the first non-whitespace character on this line.
  If point was already at that position, move point to beginning of line."
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
           (beginning-of-line)))))
#+end_src
** Use newline-and-indent in open-line command if there are non-whitespace characters after the point
#+begin_src emacs-lisp
(define-key global-map [remap open-line]
  (defun open-line-indent (arg)
    "Use newline-and-indent in open-line command if there are
  non-whitespace characters after the point"
    (interactive "P")
    (save-excursion
      (if (looking-at-p "\\s-*$") ;; how in earth does this work?
          (newline arg)
        (newline-and-indent)))))
#+end_src
** Yank Primary
#+begin_src emacs-lisp
(defun yank-primary ()
  (interactive)
  (insert-for-yank (x-get-selection 'PRIMARY)))

(bind-keys
 :map global-map
 ("C-M-y" . yank-primary))
#+end_src
** Move to window
https://ebzzry.github.io/emacs-hacks-2.html

#+begin_src emacs-lisp
(defun move-to-window-line-top ()
  (interactive)
  (move-to-window-line 0))

(defun move-to-window-line-center ()
  (interactive)
  (move-to-window-line nil))

(defun move-to-window-line-bottom ()
  (interactive)
  (move-to-window-line -1))

(bind-keys
 :map global-map
 ("M-1" . move-to-window-line-top)
 ("M-2" . move-to-window-line-center)
 ("M-3" . move-to-window-line-bottom))
#+end_src
** Joins following line
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "M-j")
  (defun join-following-line ()
    "Joins the following line"
    (interactive)
    (join-line -1)))
#+END_SRC
** Kill Buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+END_SRC
** Jump to line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'goto-line)
#+END_SRC
* Theme
** Cyberpunk theme
#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)))
#+end_src

** Solarized theme
#+begin_src emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+end_src

** Monokai theme
#+begin_src emacs-lisp
(setq monokai-use-variable-pitch nil)
#+end_src

** Convenient theme functions
#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "<f12>" 'switch-theme)
(bind-key "<f11>" 'disable-active-themes)
#+end_src

** Cursor
#+begin_src emacs-lisp
(set-cursor-color "orange red")
#+end_src
** Menu
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+END_SRC
* Font
** [[http://levien.com/type/myfonts/inconsolata.html][Inconsolata]]

#+begin_src sh :tangle no
# You may need to run these two lines if you haven't set up Homebrew
# Cask and its fonts formula.
brew install caskroom/cask/brew-cask
brew tap caskroom/fonts

brew cask install font-inconsolata
#+end_src

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Inconsolata-10"))
#+end_src
** Size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :box nil
                    :height 100)
(set-face-attribute 'default nil 
                    :height 100)
(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :height 100)
#+END_SRC

* Sane defaults
- [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] 
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable Ring
(setq ring-bell-function #'ignore)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(global-hl-line-mode 1)
(set-face-background 'hl-line "#222")

(setq uniquify-buffer-name-style 'forward)

;; Don't beep at me
(setq visible-bell t)

;; Tab Width
(setq-default tab-width 2)

#+end_src

* Mac customizations
#+begin_src emacs-lisp
(let ((is-mac (string-equal system-type "darwin")))
  (when is-mac
    ;; delete files by moving them to the trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash")

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; set the Fn key as the hyper key
    (setq ns-function-modifier 'hyper)

    ;; Use Command-` to switch between Emacs windows (not frames)
    (bind-key "s-`" 'other-window)
    
    ;; Use Command-Shift-` to switch Emacs frames in reverse
    (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

    ;; Because of the keybindings above, set one for `other-frame'
    (bind-key "s-1" 'other-frame)

    ;; Fullscreen!
    (setq ns-use-native-fullscreen nil) ; Not Lion style
    (bind-key "<s-return>" 'toggle-frame-fullscreen)

    ;; buffer switching
    (bind-key "s-{" 'previous-buffer)
    (bind-key "s-}" 'next-buffer)

    ;; Compiling
    (bind-key "H-c" 'compile)
    (bind-key "H-r" 'recompile)
    (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

    ;; disable the key that minimizes emacs to the dock because I don't
    ;; minimize my windows
    ;; (global-unset-key (kbd "C-z"))

    (defun open-dir-in-finder ()
      "Open a new Finder window to the path of the current buffer"
      (interactive)
      (shell-command "open ."))
    (bind-key "s-/" 'open-dir-in-finder)

    (defun open-dir-in-iterm ()
      "Open the current directory of the buffer in iTerm."
      (interactive)
      (let* ((iterm-app-path "/Applications/iTerm.app")
             (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
             (iterm-path (if (file-directory-p iterm-app-path)
                             iterm-app-path
                           iterm-brew-path)))
        (shell-command (concat "open -a " iterm-path " ."))))
    (bind-key "s-=" 'open-dir-in-iterm)

    ;; Not going to use these commands
    (put 'ns-print-buffer 'disabled t)
    (put 'suspend-frame 'disabled t)))

    ;; Swap Cmd and Alt
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
#+end_src

~exec-path-from-shell~ makes the command-line path with Emacs's shell
match the same one on OS X.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :init
  (exec-path-from-shell-initialize))
#+end_src

* ERC
#+begin_src emacs-lisp
(setq erc-timestamp-format "[%H:%M] ")
(setq erc-fill-prefscraix "      + ")
(setq erc-fill-static-center 22)

(setq erc-user-full-name "rustico"
      erc-part-reason-various-alist '(("^$" "Leaving"))
      erc-quit-reason-various-alist '(("^$" "Leaving"))
      erc-quit-reason 'erc-part-reason-various
      erc-part-reason 'erc-quit-reason-various
      erc-nick "rustico"
      erc-password "nicolas1983")

(add-hook 'erc-mode-hook (lambda () (auto-fill-mode 0)))
(add-hook 'erc-insert-post-hook 'erc-save-buffer-in-logs)

(require 'erc-track) ;; Track channel activity in mode-line
(erc-track-mode t)
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477"))
(setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))

(setq erc-kill-buffer-on-part t);; kill buffers when leaving
(erc-scrolltobottom-mode) ;; keep input at bottom

(define-key erc-mode-map (kbd "RET") nil)
(define-key erc-mode-map (kbd "C-c RET") 'erc-send-current-line)

(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#pyar" "#clojure")))
#+end_src
* Org mode
** Org activation bindings
Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

** Org capture
#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/org/notes.org")
#+end_src

** Org Setup: Speed Commands
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src

** Org Tags
#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (perl . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "perl")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src
** Org exporting
*** Pandoc exporter

Pandoc converts between a huge number of different file formats. 

#+begin_src emacs-lisp
(use-package ox-pandoc
  :no-require t
  :ensure t)
#+end_src
** Disable C-TAB
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          '(lambda ()
             (define-key org-mode-map [(control tab)] nil)))
#+END_SRC
** Tasks
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
* PDF
http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/

#+BEGIN_SRC  sh :tangle no
brew install ghostscript
#+END_SRC

#+begin_src emacs-lisp
(add-hook 'doc-view-mode-hook
  (lambda ()
    (linum-mode -1)
  ))

(fset 'doc-prev "\C-xo\C-x[\C-xo")
(fset 'doc-next "\C-xo\C-x]\C-xo")
(global-set-key (kbd "M-[") 'doc-prev)
(global-set-key (kbd "M-]") 'doc-next)
#+end_src
* Tramp
#+begin_src emacs-lisp :tangle no
(use-package tramp)
#+end_src
* Shell
#+begin_src emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)
#+end_src
* Windows
** Movement
#+begin_src emacs-lisp
(global-set-key (kbd "<C-down>") 'shrink-window)
(global-set-key (kbd "<C-up>") 'enlarge-window)
(global-set-key (kbd "<C-left>") 'shrink-window-horizontally)
(global-set-key (kbd "<C-right>") 'enlarge-window-horizontally)
(global-set-key [C-tab] 'other-window)

(global-set-key (kbd "<S-tab>") 'other-frame)
(global-set-key (kbd "<s-tab>") 'other-frame)
(global-set-key (kbd "<backtab>") 'other-frame)
#+end_src

** Winner mode

- Undo: C-c <left> 
- Redo: C-c <right>

#+begin_src emacs-lisp
(winner-mode t)
#+end_src
** Transpose frame
#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("s-M-t" . transpose-frame))
#+end_src
* Whitespace mode
#+begin_src emacs-lisp
(use-package whitespace
  :bind ("<f10>" . whitespace-mode))
#+end_src
* ELPA packages
** Avy
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c j" . avy-goto-word-or-subword-1))
#+end_src
** [[https://github.com/abo-abo/ace-window][Ace Window]] 
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?q ?w ?e ?r ?a ?s ?d ?f))
  (ace-window-display-mode)
  :bind ("s-o" . ace-window))
#+end_src
** [[https://github.com/Wilfred/ag.el][ag]] - The Silver Searcher

#+begin_src sh
brew install the_silver_searcher
#+end_src

#+begin_src emacs-lisp
(use-package ag
  :ensure t
  :config
  (global-set-key (kbd "<f1>") 'ag))
#+end_src

** [[https://github.com/browse-kill-ring/browse-kill-ring][Browse Kill Ring]]
#+begin_src emacs-lisp
(use-package browse-kill-ring
  :ensure t)
#+end_src
** Expand Region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src
** Helm
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (helm-projectile-on)
          (use-package helm-ag :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-split-window-in-side-p t
                helm-buffers-fuzzy-matching t
                helm-move-to-line-cycle-in-source t
                helm-scroll-amount 8
                helm-ff-file-name-history-use-recentf t
                helm-M-x-fuzzy-match t)
          (helm-mode))
  :bind (("C-c C-h" . helm-command-prefix)
         ("C-x C-b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x C-f" . helm-find-files)))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("<f9>" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src
*** Fullscreen magit
#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Multiple Cursors
We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :init (require 'multiple-cursors)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+end_src

*** Linter setups

Install the HTML5/CSS/JavaScript linters.

#+begin_src sh
brew tap homebrew/dupes
brew install tidy
npm install -g jshint
npm install -g csslint
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** [[http://batsov.com/projectile/][Projectile]]
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
#+end_src

** Python
Integrates with IPython.

#+begin_src emacs-lisp :tangle no
(use-package python-mode
  :ensure t)
#+end_src

** Restclient

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

** Smartparens mode

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn (require 'smartparens-config)
                 (smartparens-global-mode t)))
#+end_src

*** Smartparens org mode

Set up some pairings for org mode markup. These pairings won't
activate by default; they'll only apply for wrapping regions.

#+begin_src emacs-lisp
(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
#+end_src
** Smartscan
#+BEGIN_QUOTE
Quickly jumps between other symbols found at point in Emacs.
#+END_QUOTE
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1)
  :bind (("s-n" . smartscan-symbol-go-forward)
         ("s-p" . smartscan-symbol-go-backward)))
#+end_src
** Undo Tree

- Visualize Tree: C-x u 

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :ensure t
  :diminish undo-tree-mode
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

(global-set-key (kbd "C-z") 'undo)
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-S-z") 'redo)

#+END_SRC
** Visual-regexp
#+begin_src emacs-lisp
(use-package visual-regexp
  :ensure t
  :init
  (use-package visual-regexp-steroids :ensure t)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark) ; Need multiple cursors
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
#+end_src

** Webmode
#+begin_src emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+end_src
** Zoom-frm
=zoom-frm= is a nice package that allows you to resize the text of
entire Emacs frames (this includes text in the buffer, mode line, and
minibuffer). The =zoom-in/out= command acts similar to the
=text-scale-adjust= command---you can chain zooming in, out, or
resetting to the default size once the command has been initially
called.

Changing the =frame-zoom-font-difference= essentially enables a
"presentation mode" when calling =toggle-zoom-frame=.

#+begin_src emacs-lisp
(use-package zoom-frm
  :ensure t
  :bind (("C-M-=" . zoom-in/out)
         ("H-z"   . toggle-zoom-frame))
  :config
  (setq frame-zoom-font-difference 10))
#+end_src

** Scratch
Convenient package to create =*scratch*= buffers that are based on the
current buffer's major mode. This is more convienent than manually
creating a buffer to do some scratch work or reusing the initial
=*scratch*= buffer.

#+begin_src emacs-lisp
(use-package scratch
  :ensure t)
#+end_src

* Perl
http://www.emacswiki.org/emacs/CPerlMode

#+BEGIN_SRC emacs-lisp
(defalias 'perl-mode 'cperl-mode)
#+END_SRC
* HTML
#+BEGIN_SRC emacs-lisp
(setq sgml-basic-offset 4)
(setq css-indent-offset 2)
#+END_SRC
* Misc
** Display Battery Mode

See the documentation for =battery-mode-line-format= for the format
characters.

#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
#+end_src
